package generator

type Pair struct {
	Weight float64
	Value  string
}

// Generates a distribution by choosing from a discrete set of values.
type DiscreteGenerator struct {
	values    []*Pair
	lastValue string
}

func NewDiscreteGenerator() *DiscreteGenerator {
	return &DiscreteGenerator{
		values:    make([]*Pair, 0),
		lastValue: "",
	}
}

// Generate the next string in the distribution.
func (self *DiscreteGenerator) NextString() string {
	var sum float64
	for _, p := range self.values {
		sum += p.Weight
	}

	value := NextFloat64()

	for _, p := range self.values {
		v := p.Weight / sum
		if value < v {
			return p.Value
		}
		value -= v
	}

	// should never get here.
	panic("oops. should not get here")
}

// Return the previous string generated by the distribution;
// e.g. returned from the last NextString() call.
// Calling LastString() should not advance the distribution or have any
// side effects. If NextString() has not yet been called, LastString()
// should return something reasonable.
func (self *DiscreteGenerator) LastString() string {
	if len(self.lastValue) == 0 {
		self.lastValue = self.NextString()
	}
	return self.lastValue
}

func (self *DiscreteGenerator) AddValue(weight float64, value string) {
	self.values = append(self.values, &Pair{
		Weight: weight,
		Value:  value,
	})
}

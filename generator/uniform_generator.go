package generator

// Generate integers randomly uniform from an interval.
type UniformIntegerGenerator struct {
	*IntegerGeneratorBase
	lowerBound int64
	upperBound int64
	interval   int64
}

// Create a generator that will return integers uniformly randomly from
// the interval[lowerBound, upperBound] inclusive(that is, lowerBound and
// upperBound are possible values)
func NewUniformIntegerGenerator(lowerBound, upperBound int64) *UniformIntegerGenerator {
	return &UniformIntegerGenerator{
		lowerBound: lowerBound,
		upperBound: upperBound,
		interval:   upperBound - lowerBound,
	}
}

func (self *UniformIntegerGenerator) NextInt() int64 {
	ret := NextInt64(self.interval) + self.lowerBound
	self.SetLastInt(ret)
	return ret
}

func (self *UniformIntegerGenerator) NextString() string {
	return self.IntegerGeneratorBase.NextString(self)
}

func (self *UniformIntegerGenerator) Mean() float64 {
	return float64(self.lowerBound+self.upperBound) / 2.0
}

// An expression that generates a random integer in the specified range.
type UniformGenerator struct {
	values     []string
	lastString string
	gen        *UniformIntegerGenerator
}

// Create a generator that will return strings from the specified set
// uniformly randomly.
func NewUniformGenerator(values []string) *UniformGenerator {
	return &UniformGenerator{
		values: values,
		gen:    NewUniformIntegerGenerator(0, int64(len(values)-1)),
	}
}

// Generate the next string in the distribution.
func (self *UniformGenerator) NextString() string {
	self.lastString = self.values[self.gen.NextInt()]
	return self.lastString
}

// Return the previous string generated by the distribution;
// e.g., returned from the last NextString() call.
// Calling LastString() should not advance the distribution or have any
// side effects. If NextString() has not yet been called, LastString()
// should return something reasonable.
func (self *UniformGenerator) LastString() string {
	if len(self.lastString) == 0 {
		self.NextString()
	}
	return self.lastString
}
